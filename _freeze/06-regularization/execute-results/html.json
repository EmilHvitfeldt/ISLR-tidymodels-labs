{
  "hash": "9731b2e619e9971470ab94e40136e629",
  "result": {
    "markdown": "# Linear Model Selection and Regularization\n\n\n::: {.cell}\n\n:::\n\n\nThis lab will take a look at regularization models and hyperparameter tuning. These models are related to the models we saw in chapter 3 and 4, with the difference that they contain a regularization term.\nThis chapter will use [parsnip](https://www.tidymodels.org/start/models/) for model fitting and [recipes and workflows](https://www.tidymodels.org/start/recipes/) to perform the transformations, and [tune and dials](https://www.tidymodels.org/start/tuning/) to tune the hyperparameters of the model.\n\nWe will be using the `Hitters` data set from the `ISLR` package. We wish to predict the baseball players `Salary` based on several different characteristics which are included in the data set. Since we wish to predict `Salary`, then we need to remove any missing data from that column. Otherwise, we won't be able to run the models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(ISLR)\n\nHitters <- as_tibble(Hitters) %>%\n  filter(!is.na(Salary))\n```\n:::\n\n\n## Best Subset Selection\n\ntidymodels does not currently support subset selection methods, and it unlikely to include it in the [near future](https://stackoverflow.com/questions/66651033/stepwise-algorithm-in-tidymodels#comment117845482_66651033).\n\n## Forward and Backward Stepwise Selection\n\ntidymodels does not currently support forward and backward stepwise selection methods, and it unlikely to include it in the [near future](https://stackoverflow.com/questions/66651033/stepwise-algorithm-in-tidymodels#comment117845482_66651033).\n\n## Ridge Regression\n\nWe will use the `glmnet` package to perform ridge regression. `parsnip` does not have a dedicated function to create a ridge regression model specification. You need to use `linear_reg()` and set `mixture = 0` to specify a ridge model. The `mixture` argument specifies the amount of different types of regularization, `mixture = 0` specifies only ridge regularization and `mixture = 1` specifies only lasso regularization. Setting `mixture` to a value between 0 and 1 lets us use both. When using the `glmnet` engine we also need to set a `penalty` to be able to fit the model. We will set this value to `0` for now, it is not the best value, but we will look at how to select the best value in a little bit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_spec <- linear_reg(mixture = 0, penalty = 0) %>%\n  set_mode(\"regression\") %>%\n  set_engine(\"glmnet\")\n```\n:::\n\n\nOnce the specification is created we can fit it to our data. We will use all the predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_fit <- fit(ridge_spec, Salary ~ ., data = Hitters)\n```\n:::\n\n\nThe `glmnet` package will fit the model for all values of `penalty` at once, so let us see what the parameter estimate for the model is now that we have `penalty = 0`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(ridge_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   term          estimate penalty\n   <chr>            <dbl>   <dbl>\n 1 (Intercept)   81.1           0\n 2 AtBat         -0.682         0\n 3 Hits           2.77          0\n 4 HmRun         -1.37          0\n 5 Runs           1.01          0\n 6 RBI            0.713         0\n 7 Walks          3.38          0\n 8 Years         -9.07          0\n 9 CAtBat        -0.00120       0\n10 CHits          0.136         0\n11 CHmRun         0.698         0\n12 CRuns          0.296         0\n13 CRBI           0.257         0\n14 CWalks        -0.279         0\n15 LeagueN       53.2           0\n16 DivisionW   -123.            0\n17 PutOuts        0.264         0\n18 Assists        0.170         0\n19 Errors        -3.69          0\n20 NewLeagueN   -18.1           0\n```\n:::\n:::\n\n\nLet us instead see what the estimates would be if the penalty was 11498.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(ridge_fit, penalty = 11498)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   term         estimate penalty\n   <chr>           <dbl>   <dbl>\n 1 (Intercept) 407.        11498\n 2 AtBat         0.0370    11498\n 3 Hits          0.138     11498\n 4 HmRun         0.525     11498\n 5 Runs          0.231     11498\n 6 RBI           0.240     11498\n 7 Walks         0.290     11498\n 8 Years         1.11      11498\n 9 CAtBat        0.00314   11498\n10 CHits         0.0117    11498\n11 CHmRun        0.0876    11498\n12 CRuns         0.0234    11498\n13 CRBI          0.0242    11498\n14 CWalks        0.0250    11498\n15 LeagueN       0.0866    11498\n16 DivisionW    -6.23      11498\n17 PutOuts       0.0165    11498\n18 Assists       0.00262   11498\n19 Errors       -0.0206    11498\n20 NewLeagueN    0.303     11498\n```\n:::\n:::\n\n\nNotice how the estimates are decreasing when the amount of penalty goes up. Look below at the parameter estimates for `penalty = 705` and `penalty = 50`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(ridge_fit, penalty = 705)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   term        estimate penalty\n   <chr>          <dbl>   <dbl>\n 1 (Intercept)  54.4        705\n 2 AtBat         0.112      705\n 3 Hits          0.656      705\n 4 HmRun         1.18       705\n 5 Runs          0.937      705\n 6 RBI           0.847      705\n 7 Walks         1.32       705\n 8 Years         2.58       705\n 9 CAtBat        0.0108     705\n10 CHits         0.0468     705\n11 CHmRun        0.338      705\n12 CRuns         0.0937     705\n13 CRBI          0.0979     705\n14 CWalks        0.0718     705\n15 LeagueN      13.7        705\n16 DivisionW   -54.7        705\n17 PutOuts       0.119      705\n18 Assists       0.0161     705\n19 Errors       -0.704      705\n20 NewLeagueN    8.61       705\n```\n:::\n\n```{.r .cell-code}\ntidy(ridge_fit, penalty = 50)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 3\n   term          estimate penalty\n   <chr>            <dbl>   <dbl>\n 1 (Intercept)   48.2          50\n 2 AtBat         -0.354        50\n 3 Hits           1.95         50\n 4 HmRun         -1.29         50\n 5 Runs           1.16         50\n 6 RBI            0.809        50\n 7 Walks          2.71         50\n 8 Years         -6.20         50\n 9 CAtBat         0.00609      50\n10 CHits          0.107        50\n11 CHmRun         0.629        50\n12 CRuns          0.217        50\n13 CRBI           0.215        50\n14 CWalks        -0.149        50\n15 LeagueN       45.9          50\n16 DivisionW   -118.           50\n17 PutOuts        0.250        50\n18 Assists        0.121        50\n19 Errors        -3.28         50\n20 NewLeagueN    -9.42         50\n```\n:::\n:::\n\n\nWe can visualize how the magnitude of the coefficients are being regularized towards zero as the penalty goes up. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_fit %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](06-regularization_files/figure-html/unnamed-chunk-8-1.png){fig-alt='Multiple line chart. Log Lambda along the x-axis, Coefficients\nalong the y-axis. The curves starts at different places along\nthe y-axis but slowly converge towards 0 as the Log Lambda\nvalue increase.' width=672}\n:::\n:::\n\n\nPrediction is done like normal, if we use `predict()` by itself, then `penalty = 0` as we set in the model specification is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(ridge_fit, new_data = Hitters)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 263 × 1\n    .pred\n    <dbl>\n 1  442. \n 2  676. \n 3 1059. \n 4  521. \n 5  543. \n 6  218. \n 7   74.7\n 8   96.1\n 9  809. \n10  865. \n# ℹ 253 more rows\n```\n:::\n:::\n\n\nbut we can also get predictions for other values of `penalty` by specifying it in `predict()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(ridge_fit, new_data = Hitters, penalty = 500)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 263 × 1\n   .pred\n   <dbl>\n 1  525.\n 2  620.\n 3  895.\n 4  425.\n 5  589.\n 6  179.\n 7  147.\n 8  187.\n 9  841.\n10  840.\n# ℹ 253 more rows\n```\n:::\n:::\n\n\nWe saw how we can fit a ridge model and make predictions for different values of `penalty`. But it would be nice if we could find the \"best\" value of the penalty. This is something we can use hyperparameter tuning for. Hyperparameter tuning is in its simplest form a way of fitting many models with different sets of hyperparameters trying to find one that performs \"best\". The complexity in hyperparameter tuning can come from how you try different models. We will keep it simple for this lab and only look at grid search, only looking at evenly spaced parameter values. This is a fine enough approach if you have one or two tunable parameters but can become computationally infeasible. See the chapter on [iterative search](https://www.tmwr.org/iterative-search.html) from [Tidy Modeling with R](https://www.tmwr.org/) for more information.\n\nWe start like normal by setting up a validation split. A K-fold cross-validation data set is created on the training data set with 10 folds.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nHitters_split <- initial_split(Hitters, strata = \"Salary\")\n\nHitters_train <- training(Hitters_split)\nHitters_test <- testing(Hitters_split)\n\nHitters_fold <- vfold_cv(Hitters_train, v = 10)\n```\n:::\n\n\nWe can use the `tune_grid()` function to perform hyperparameter tuning using a grid search. `tune_grid()` needs 3 different thing;\n\n- a `workflow` object containing the model and preprocessor,\n- a `rset` object containing the resamples the `workflow` should be fitted within, and\n- a tibble containing the parameter values to be evaluated.\n\nOptionally a metric set of performance metrics can be supplied for evaluation. If you don't set one then a default set of performance metrics is used.\n\nWe already have a resample object created in `Hitters_fold`. Now we should create the workflow specification next.\n\nWe just used the data set as is when we fit the model earlier. But ridge regression is scale sensitive so we need to make sure that the variables are on the same scale. We can use `step_normalize()`. Secondly let us deal with the factor variables ourself using `step_novel()` and `step_dummy()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_recipe <- \n  recipe(formula = Salary ~ ., data = Hitters_train) %>% \n  step_novel(all_nominal_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_predictors())\n```\n:::\n\n\nThe model specification will look very similar to what we have seen earlier, but we will set `penalty = tune()`. This tells `tune_grid()` that the `penalty` parameter should be tuned.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_spec <- \n  linear_reg(penalty = tune(), mixture = 0) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"glmnet\")\n```\n:::\n\n\nNow we combine to create a `workflow` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_workflow <- workflow() %>% \n  add_recipe(ridge_recipe) %>% \n  add_model(ridge_spec)\n```\n:::\n\n\nThe last thing we need is the values of `penalty` we are trying. This can be created using `grid_regular()` which creates a grid of evenly spaces parameter values. We use the `penalty()` function from the [dials](https://dials.tidymodels.org/) package to denote the parameter and set the range of the grid we are searching for. Note that this range is log-scaled.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenalty_grid <- grid_regular(penalty(range = c(-5, 5)), levels = 50)\npenalty_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 × 1\n     penalty\n       <dbl>\n 1 0.00001  \n 2 0.0000160\n 3 0.0000256\n 4 0.0000409\n 5 0.0000655\n 6 0.000105 \n 7 0.000168 \n 8 0.000268 \n 9 0.000429 \n10 0.000687 \n# ℹ 40 more rows\n```\n:::\n:::\n\n\nUsing 50 levels for one parameter might seem overkill and in many applications it is. But remember that `glmnet` fits all the models in one go so adding more levels to `penalty` doesn't affect the computational speed much.\n\nNow we have everything we need and we can fit all the models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_res <- tune_grid(\n  ridge_workflow,\n  resamples = Hitters_fold, \n  grid = penalty_grid\n)\n\ntune_res\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Tuning results\n# 10-fold cross-validation \n# A tibble: 10 × 4\n   splits           id     .metrics           .notes          \n   <list>           <chr>  <list>             <list>          \n 1 <split [176/20]> Fold01 <tibble [100 × 5]> <tibble [0 × 3]>\n 2 <split [176/20]> Fold02 <tibble [100 × 5]> <tibble [0 × 3]>\n 3 <split [176/20]> Fold03 <tibble [100 × 5]> <tibble [0 × 3]>\n 4 <split [176/20]> Fold04 <tibble [100 × 5]> <tibble [0 × 3]>\n 5 <split [176/20]> Fold05 <tibble [100 × 5]> <tibble [0 × 3]>\n 6 <split [176/20]> Fold06 <tibble [100 × 5]> <tibble [0 × 3]>\n 7 <split [177/19]> Fold07 <tibble [100 × 5]> <tibble [0 × 3]>\n 8 <split [177/19]> Fold08 <tibble [100 × 5]> <tibble [0 × 3]>\n 9 <split [177/19]> Fold09 <tibble [100 × 5]> <tibble [0 × 3]>\n10 <split [177/19]> Fold10 <tibble [100 × 5]> <tibble [0 × 3]>\n```\n:::\n:::\n\n\nThe output of `tune_grid()` can be hard to read by itself unprocessed. `autoplot()` creates a great visualization \n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(tune_res)\n```\n\n::: {.cell-output-display}\n![](06-regularization_files/figure-html/unnamed-chunk-17-1.png){fig-alt='Facetted connected scatter chart. regularization along the\nx-axis. Performance values along the y-axis. The facets are\nrmse and rsq. Both are fairly constant for low values of\nregularization, rmse starts moderately increasing and rsq\nstarts moderately decreasing once the regularization\ngets larger.' width=672}\n:::\n:::\n\nHere we see that the amount of regularization affects the performance metrics differently. Note how there are areas where the amount of regularization doesn't have any meaningful influence on the coefficient estimates. We can also see the raw metrics that created this chart by calling `collect_matrics()`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(tune_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100 × 7\n     penalty .metric .estimator    mean     n std_err .config              \n       <dbl> <chr>   <chr>        <dbl> <int>   <dbl> <chr>                \n 1 0.00001   rmse    standard   335.       10 31.2    Preprocessor1_Model01\n 2 0.00001   rsq     standard     0.470    10  0.0615 Preprocessor1_Model01\n 3 0.0000160 rmse    standard   335.       10 31.2    Preprocessor1_Model02\n 4 0.0000160 rsq     standard     0.470    10  0.0615 Preprocessor1_Model02\n 5 0.0000256 rmse    standard   335.       10 31.2    Preprocessor1_Model03\n 6 0.0000256 rsq     standard     0.470    10  0.0615 Preprocessor1_Model03\n 7 0.0000409 rmse    standard   335.       10 31.2    Preprocessor1_Model04\n 8 0.0000409 rsq     standard     0.470    10  0.0615 Preprocessor1_Model04\n 9 0.0000655 rmse    standard   335.       10 31.2    Preprocessor1_Model05\n10 0.0000655 rsq     standard     0.470    10  0.0615 Preprocessor1_Model05\n# ℹ 90 more rows\n```\n:::\n:::\n\n\nThe \"best\" values of this can be selected using `select_best()`, this function requires you to specify a `matric` that it should select against. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_penalty <- select_best(tune_res, metric = \"rsq\")\nbest_penalty\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  penalty .config              \n    <dbl> <chr>                \n1    33.9 Preprocessor1_Model33\n```\n:::\n:::\n\n\nThis value of `penalty` can then be used with `finalize_workflow()` to update/finalize the recipe by replacing `tune()` with the value of `best_penalty`. Now, this model should be fit again, this time using the whole training data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nridge_final <- finalize_workflow(ridge_workflow, best_penalty)\n\nridge_final_fit <- fit(ridge_final, data = Hitters_train)\n```\n:::\n\n\nThis final model can now be applied on our testing data set to validate the performance\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(ridge_final_fit, new_data = Hitters_test) %>%\n  rsq(truth = Salary, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.461\n```\n:::\n:::\n\n\nAnd it performs fairly well given what we saw earlier.\n\n## The Lasso\n\nWe will use the `glmnet` package to perform lasso regression. `parsnip` does not have a dedicated function to create a ridge regression model specification. You need to use `linear_reg()` and set `mixture = 1` to specify a lasso model. The `mixture` argument specifies the amount of different types of regularization, `mixture = 0` specifies only ridge regularization and `mixture = 1` specifies only lasso regularization. Setting `mixture` to a value between 0 and 1 lets us use both.\n\nThe following procedure will be very similar to what we saw in the ridge regression section. The preprocessing needed is the same, but let us write it out one more time. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_recipe <- \n  recipe(formula = Salary ~ ., data = Hitters_train) %>% \n  step_novel(all_nominal_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_predictors())\n```\n:::\n\n\nNext, we finish the lasso regression `workflow`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_spec <- \n  linear_reg(penalty = tune(), mixture = 1) %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"glmnet\") \n\nlasso_workflow <- workflow() %>% \n  add_recipe(lasso_recipe) %>% \n  add_model(lasso_spec)\n```\n:::\n\n\nWhile we are doing a different kind of regularization we still use the same `penalty` argument. I have picked a different range for the values of penalty since I know it will be a good range. You would in practice have to cast a wide net at first and then narrow on the range of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenalty_grid <- grid_regular(penalty(range = c(-2, 2)), levels = 50)\n```\n:::\n\n\nAnd we can use `tune_grid()` again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_res <- tune_grid(\n  lasso_workflow,\n  resamples = Hitters_fold, \n  grid = penalty_grid\n)\n\nautoplot(tune_res)\n```\n\n::: {.cell-output-display}\n![](06-regularization_files/figure-html/unnamed-chunk-25-1.png){fig-alt='Facetted connected scatter chart. regularization along the\nx-axis. Performance values along the y-axis. The facets are\nrmse and rsq. Both are fairly constant for low values of\nregularization, rmse starts moderately increasing and rsq\nstarts moderately decreasing once the regularization\ngets larger.' width=672}\n:::\n:::\n\n\nWe select the best value of `penalty` using `select_best()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_penalty <- select_best(tune_res, metric = \"rsq\")\n```\n:::\n\n\nAnd refit the using the whole training data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_final <- finalize_workflow(lasso_workflow, best_penalty)\n\nlasso_final_fit <- fit(lasso_final, data = Hitters_train)\n```\n:::\n\n\nAnd we are done, by calculating the `rsq` value for the lasso model can we see that for this data ridge regression outperform lasso regression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(lasso_final_fit, new_data = Hitters_test) %>%\n  rsq(truth = Salary, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rsq     standard       0.446\n```\n:::\n:::\n\n\n## Principal Components Regression\n\nWe will talk more about principal components analysis in chapter 10. This section will show how principal components can be used as a dimensionality reduction preprocessing step.\n\nI will treat principal component regression as a linear model with PCA transformations in the preprocessing. But using the tidymodels framework then this is still mostly one model. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlm_spec <- \n  linear_reg() %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"lm\")\n```\n:::\n\n\nThe preprocessing recipe will closely resemble the recipe we saw in the ridge and lasso sections. The main difference is that we end the recipe with `step_pca()` which will perform principal component analysis on all the predictors, and return the components that explain `threshold` percent of the variance. We have set `threshold = tune()` so we can treat the threshold as a hyperparameter to be tuned. By using workflows and tune together can be tune parameters in the preprocessing as well as parameters in the models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_recipe <- \n  recipe(formula = Salary ~ ., data = Hitters_train) %>% \n  step_novel(all_nominal_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_predictors()) %>%\n  step_pca(all_predictors(), threshold = tune())\n\npca_workflow <- \n  workflow() %>% \n  add_recipe(pca_recipe) %>% \n  add_model(lm_spec)\n```\n:::\n\n\nWe create a smaller grid for `threshold` and we don't need to modify the range since `[0, 1]` is an acceptable range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold_grid <- grid_regular(threshold(), levels = 10)\nthreshold_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 1\n   threshold\n       <dbl>\n 1     0    \n 2     0.111\n 3     0.222\n 4     0.333\n 5     0.444\n 6     0.556\n 7     0.667\n 8     0.778\n 9     0.889\n10     1    \n```\n:::\n:::\n\n\nAnd now we fit using `tune_grid()`. This time we will actually perform 100 fits since we need to fit a model for each value of `threshold` within each fold.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_res <- tune_grid(\n  pca_workflow,\n  resamples = Hitters_fold, \n  grid = threshold_grid\n)\n```\n:::\n\n\nThe results look a little shaky here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(tune_res)\n```\n\n::: {.cell-output-display}\n![](06-regularization_files/figure-html/unnamed-chunk-33-1.png){fig-alt='Facetted connected scatter chart. regularization along the\nx-axis. Performance values along the y-axis. The facets are\nrmse and rsq. Very variable, appears to produce best values\nfor threshold == 0.5.' width=672}\n:::\n:::\n\n\nBut we can still select the best model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_threshold <- select_best(tune_res, metric = \"rmse\")\n```\n:::\n\n\nAnd fit the model much like have done a couple of times by now. The workflow is finalized using the value we selected with `select_best()`, and training using the full training data set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npca_final <- finalize_workflow(pca_workflow, best_threshold)\n\npca_final_fit <- fit(pca_final, data = Hitters_train)\n```\n:::\n\n\n## Partial Least Squares\n\nLastly, we have a partial least squares model. We will treat this much like the PCA section and say that partial least squares calculations will be done as a preprocessing that we tune. The following code is almost identical to previous chapters and will be shown in full without many explanations to avoid repetition. If you skipped to this section, go back and read the previous sections for more commentary.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npls_recipe <- \n  recipe(formula = Salary ~ ., data = Hitters_train) %>% \n  step_novel(all_nominal_predictors()) %>% \n  step_dummy(all_nominal_predictors()) %>% \n  step_zv(all_predictors()) %>% \n  step_normalize(all_predictors()) %>%\n  step_pls(all_predictors(), num_comp = tune(), outcome = \"Salary\")\n\nlm_spec <- linear_reg() %>% \n  set_mode(\"regression\") %>% \n  set_engine(\"lm\") \n\npls_workflow <- workflow() %>% \n  add_recipe(pls_recipe) %>% \n  add_model(lm_spec) \n\nnum_comp_grid <- grid_regular(num_comp(c(1, 20)), levels = 10)\n\ntune_res <- tune_grid(\n  pls_workflow,\n  resamples = Hitters_fold, \n  grid = num_comp_grid\n)\n\nbest_threshold <- select_best(tune_res, metric = \"rmse\")\n\npls_final <- finalize_workflow(pls_workflow, best_threshold)\n\npls_final_fit <- fit(pls_final, data = Hitters_train)\n```\n:::\n",
    "supporting": [
      "06-regularization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}